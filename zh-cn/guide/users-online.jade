section
  h3(id='users-online') 在线用户计数

  p.
    这一小节我们讲解一个小而全的应用程序，它通过<a href="http://redis.io">Redis</a>记录在线用户数。
    首先你需要创建一个package.json 文件，包含两个依赖,
    一个是redis 客户端，另一个是Express。
    另外需要确认你安装了redis, 可以能过执行<code>$ redis-server</code>来确认：

  +js.
    {
      "name": "app",
      "version": "0.0.1",
      "dependencies": {
        "express": "3.x",
        "redis": "*"
      }
    }

  p.
    接下来你需要你创建一个应用程序，和一个redis连接：

  +js.
    var express = require('express');
    var redis = require('redis');
    var db = redis.createClient();
    var app = express();

  p.
    接下来是纪录用户在线的中间件。
    这里我们使用sorted sets, 它的一个好处是我们可以查询最近N毫秒内在线的用户。
    我们通过传入一个时间戳来当作成员的"score"。
    注意我们使用 User-Agent 作为一个标识用户的id。

  +js.
    app.use(function(req, res, next){
      var ua = req.headers['user-agent'];
      db.zadd('online', Date.now(), ua, next);
    });

  p.
    下一个中间件是通过<strong>zrevrangebyscore</strong>来查询上一分钟在线用户。
    我们将能得到从当前时间算起在60,000毫秒内活跃的用户。

  +js.
    app.use(function(req, res, next){
      var min = 60 * 1000;
      var ago = Date.now() - min;
      db.zrevrangebyscore('online', '+inf', ago, function(err, users){
        if (err) return next(err);
        req.online = users;
        next();
      });
    });

  p.
    最后我们来使用它，绑定到一个端口！这些就是这个程序的一切了，在不同的浏览器里访问这个应用程序，你会看到计数的增长。
  
  +js.
    app.get('/', function(req, res){
      res.send(req.online.length + ' users online');
    });

    app.listen(3000);
