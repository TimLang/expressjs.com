section
  h3(id='error-handling') 错误处理

  p.
    错误处理的中间件和普通的中间件定义是一样的，
    只是它必须有4个形参，这是它的形式：
    <code>(err, req, res, next)</code>:

  +js.
    app.use(function(err, req, res, next){
      console.error(err.stack);
      res.send(500, 'Something broke!');
    });

  p.
    一般来说非强制性的错误处理一般被定义在最后，下面的代码展示的就是放在别的
    <code>app.use()</code> 之后：

  +js.
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(app.router);
    app.use(function(err, req, res, next){
      // logic
    });

  p.
    在这些中间件里的响应是可以任意定义的。只要你喜欢，你可以返回任意的内容，譬如HTML页面, 一个简单的消息，或者一个JSON字符串。

  p.
    对于一些组织或者更高层次的框架，你可能会像定义普通的中间件一样定义一些错误处理的中间件。
    假设你想定义一个中间件区别对待通过XHR和其它请求的错误处理，你可以这么做：

  +js.
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(app.router);
    app.use(logErrors);
    app.use(clientErrorHandler);
    app.use(errorHandler);

  p.
    通常<code>logErrors</code>用来纪录诸如stderr, loggly, 或者类似服务的错误信息：

  +js.
    function logErrors(err, req, res, next) {
      console.error(err.stack);
      next(err);
    }

  p.
    <code>clientErrorHandler</code> 定义如下，注意错误非常明确的向后传递了。

  +js.
    function clientErrorHandler(err, req, res, next) {
      if (req.xhr) {
        res.send(500, { error: 'Something blew up!' });
      } else {
        next(err);
      }
    }

  p.
    下面的<code>errorHandler</code> "捕获所有" 的异常， 定义为:

  +js.
    function errorHandler(err, req, res, next) {
      res.status(500);
      res.render('error', { error: err });
    }
